name: "Setup Node.js 16"
description: "Installs Node.js 16 with pnpm package manager (since actions/setup-node no longer supports Node 16)"
author: "ralph@nyphon.de"

outputs:
  node-path:
    description: "Path to the Node.js 16 binary"
    value: ${{ steps.install.outputs.node-path }}

runs:
  using: "composite"
  steps:
    # 1Ô∏è‚É£ Define environment
    - name: Define environment
      id: env
      shell: bash
      run: |
        echo "os=$(uname -s)" >> $GITHUB_OUTPUT
        echo "arch=$(uname -m)" >> $GITHUB_OUTPUT
        echo "node-version=16.20.2" >> $GITHUB_OUTPUT

    # 2Ô∏è‚É£ Restore cached Node installation
    - name: Restore Node.js 16 cache
      id: cache
      uses: actions/cache@v4
      with:
        path: /usr/local/node16
        key: node16-${{ steps.env.outputs.os }}-${{ steps.env.outputs.arch }}-${{ steps.env.outputs.node-version }}

    # 3Ô∏è‚É£ Install Node.js 16 only if cache not hit
    - name: Install Node.js 16
      if: steps.cache.outputs.cache-hit != 'true'
      id: install
      shell: bash
      run: |
        set -euo pipefail
        echo "üì¶ Installing Node.js 16..."

        ARCH="$(uname -m)"
        OS="$(uname -s)"
        NODE_VERSION="16.20.2"
        INSTALL_DIR="/usr/local/node16"

        # Pre-create install directory with correct permissions
        sudo mkdir -p "$INSTALL_DIR"
        sudo chown -R "$(whoami)" "$INSTALL_DIR"

        if [[ "$OS" == "Linux" ]]; then
          echo "üêß Installing Node.js for Linux..."
          
          # Map architecture
          if [[ "$ARCH" == "x86_64" ]]; then
            NODE_ARCH="x64"
          elif [[ "$ARCH" == "aarch64" ]]; then
            NODE_ARCH="arm64"
          else
            echo "‚ùå Unsupported architecture: $ARCH"
            exit 1
          fi

          DOWNLOAD_URL="https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz"
          TMPDIR="$(mktemp -d)"
          
          echo "üì• Downloading from $DOWNLOAD_URL"
          curl -fsSL "$DOWNLOAD_URL" -o "$TMPDIR/node.tar.xz"
          tar -xJf "$TMPDIR/node.tar.xz" -C "$INSTALL_DIR" --strip-components=1
          rm -rf "$TMPDIR"

        elif [[ "$OS" == "Darwin" ]]; then
          echo "üçè Installing Node.js for macOS..."
          
          # Map architecture
          if [[ "$ARCH" == "x86_64" ]]; then
            NODE_ARCH="x64"
          elif [[ "$ARCH" == "arm64" ]]; then
            NODE_ARCH="arm64"
          else
            echo "‚ùå Unsupported architecture: $ARCH"
            exit 1
          fi

          DOWNLOAD_URL="https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-darwin-${NODE_ARCH}.tar.gz"
          TMPDIR="$(mktemp -d)"
          
          echo "üì• Downloading from $DOWNLOAD_URL"
          curl -fsSL "$DOWNLOAD_URL" -o "$TMPDIR/node.tar.gz"
          tar -xzf "$TMPDIR/node.tar.gz" -C "$INSTALL_DIR" --strip-components=1
          rm -rf "$TMPDIR"

        else
          echo "‚ùå Unsupported OS: $OS"
          exit 1
        fi

        echo "‚úÖ Node.js 16 installed successfully!"
        echo "node-path=$INSTALL_DIR/bin/node" >> $GITHUB_OUTPUT

    # 4Ô∏è‚É£ Add Node.js 16 to PATH
    - name: Add Node.js 16 to PATH
      shell: bash
      run: |
        echo "/usr/local/node16/bin" >> $GITHUB_PATH
        echo "‚úÖ Node.js 16 added to PATH"

    # 5Ô∏è‚É£ Verify Node installation
    - name: Verify Node.js installation
      shell: bash
      run: |
        echo "‚úÖ Verifying Node.js installation..."
        node --version || (echo "‚ùå Node.js installation failed" && exit 1)
        npm --version || (echo "‚ùå npm installation failed" && exit 1)

    # 6Ô∏è‚É£ Install pnpm
    - name: Install pnpm
      shell: bash
      run: |
        echo "üì¶ Installing pnpm..."
        npm install -g pnpm@8
        pnpm --version
        echo "‚úÖ pnpm installed successfully!"

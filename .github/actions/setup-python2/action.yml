name: "Setup Python 2"
description: "Installs Python 2.7.18 from official sources (builds on Linux, prebuilt on macOS, with caching and acceleration)"
author: "ralph@nyphon.de"

runs:
  using: "composite"
  steps:
    # 1Ô∏è‚É£ Define environment and cache key
    - name: Define environment
      id: env
      shell: bash
      run: |
        echo "os=$(uname -s)" >> $GITHUB_OUTPUT
        echo "arch=$(uname -m)" >> $GITHUB_OUTPUT
        echo "python-version=2.7.18" >> $GITHUB_OUTPUT
        echo "install-dir=${RUNNER_TOOL_CACHE:-$HOME/.cache/tools}/python2/2.7.18" >> $GITHUB_OUTPUT

    # 2Ô∏è‚É£ Restore cached Python installation and ccache
    - name: Restore Python 2 + ccache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.env.outputs.install-dir }}
          ~/.ccache
        key: python2-${{ steps.env.outputs.os }}-${{ steps.env.outputs.arch }}-${{ steps.env.outputs.python-version }}-v2
        restore-keys: |
          python2-${{ steps.env.outputs.os }}-${{ steps.env.outputs.arch }}-${{ steps.env.outputs.python-version }}-

    # 3Ô∏è‚É£ Install build dependencies (Linux)
    - name: Install build dependencies
      if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential zlib1g-dev libssl-dev libbz2-dev \
          libreadline-dev libsqlite3-dev wget curl llvm \
          libncurses5-dev libncursesw5-dev xz-utils tk-dev \
          libffi-dev liblzma-dev ccache rsync

    # 4Ô∏è‚É£ Install or build Python 2 only if cache not hit
    - name: Install or build Python 2.7.18
      if: steps.cache.outputs.cache-hit != 'true'
      id: install
      shell: bash
      run: |
        set -euo pipefail
        echo "üêç Installing Python 2.7.18..."

        OS="$(uname -s)"
        INSTALL_DIR="${{ steps.env.outputs.install-dir }}"
        TMPDIR="$(mktemp -d)"
        PYTHON_VERSION="2.7.18"

        mkdir -p "$INSTALL_DIR"

        if [[ "$OS" == "Linux" ]]; then
          echo "üêß Attempting fast prebuilt installation..."
          PREBUILT_URL="https://github.com/indygreg/python-build-standalone/releases/download/20200827/cpython-2.7.18-x86_64-unknown-linux-gnu-pgo-20200827T2030.tar.gz"
          if curl -fsSL "$PREBUILT_URL" -o "$TMPDIR/python.tar.gz"; then
            mkdir -p "$TMPDIR/extract"
            tar --no-same-owner -xzf "$TMPDIR/python.tar.gz" -C "$TMPDIR/extract"
            topdir="$(find "$TMPDIR/extract" -mindepth 1 -maxdepth 1 -type d | head -n1 || true)"
            if [[ -n "${topdir:-}" && -d "$topdir/python" ]]; then
              rsync -a "$topdir/python/" "$INSTALL_DIR/"
            elif [[ -n "${topdir:-}" ]]; then
              rsync -a "$topdir/" "$INSTALL_DIR/"
            else
              rsync -a "$TMPDIR/extract/" "$INSTALL_DIR/"
            fi
            echo "‚úÖ Installed prebuilt Python 2.7.18"
          else
            echo "‚öôÔ∏è Prebuilt download failed, building from source..."
            cd "$TMPDIR"
            curl -fsSL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz" -o python.tgz
            tar -xzf python.tgz
            cd "Python-$PYTHON_VERSION"

            export PATH="/usr/lib/ccache:$PATH"
            ./configure --prefix="$INSTALL_DIR"
            make -j"$(nproc)" LDFLAGS="-Wl,--strip-all"
            make install
          fi

          PYTHON_PATH="$INSTALL_DIR/bin/python2.7"

        elif [[ "$OS" == "Darwin" ]]; then
          echo "üçè Installing prebuilt Python $PYTHON_VERSION for macOS..."
          cd "$TMPDIR"
          curl -fsSL "https://www.python.org/ftp/python/$PYTHON_VERSION/python-$PYTHON_VERSION-macosx10.9.pkg" -o python.pkg
          sudo installer -pkg python.pkg -target /
          PYTHON_PATH="$(command -v python2 || true)"
          [[ -z "$PYTHON_PATH" ]] && PYTHON_PATH="/usr/local/bin/python2"
        else
          echo "‚ùå Unsupported OS: $OS"
          exit 1
        fi

        echo "$PYTHON_PATH" > "$INSTALL_DIR/.python-path"
        echo "python-path=$PYTHON_PATH" >> "$GITHUB_OUTPUT"
        echo "üéâ Installed Python 2.7.18 successfully!"

    # 5Ô∏è‚É£ Add to PATH and verify (works both cached and fresh)
    - name: Add Python 2 to PATH
      shell: bash
      run: |
        set -euo pipefail
        INSTALL_DIR="${{ steps.env.outputs.install-dir }}"
        if [[ -f "$INSTALL_DIR/.python-path" ]]; then
          PYTHON_PATH="$(cat "$INSTALL_DIR/.python-path")"
        elif [[ -x "$INSTALL_DIR/bin/python2.7" ]]; then
          PYTHON_PATH="$INSTALL_DIR/bin/python2.7"
        else
          PYTHON_PATH="$(command -v python2 || true)"
        fi

        if [[ -n "$PYTHON_PATH" ]]; then
          echo "$(dirname "$PYTHON_PATH")" >> "$GITHUB_PATH"
        else
          echo "‚ö†Ô∏è Could not determine python2 path" >&2
        fi

        echo "‚úÖ Verifying Python..."
        (python2 -V || python -V)

    # 6Ô∏è‚É£ Save cache if we built or unpacked
    - name: Save Python 2 cache
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.env.outputs.install-dir }}
          ~/.ccache
        key: python2-${{ steps.env.outputs.os }}-${{ steps.env.outputs.arch }}-${{ steps.env.outputs.python-version }}-v2

name: copilot-exec
description: Run GitHub Copilot CLI with a rendered prompt template
inputs:
  prompt-path:
    description: Path to the prompt template file
    required: true
  substitutions:
    description: JSON object providing template substitutions
    required: false
    default: ""
  working-directory:
    description: Directory to run the Copilot command in
    required: false
    default: ""
  output-path:
    description: File path (relative to working-directory) to store Copilot output
    required: false
    default: copilot-output.txt
  extra-args:
    description: Additional arguments to append to the Copilot CLI invocation
    required: false
    default: ""
  additional-mcp-config:
    description: Optional MCP configuration JSON or @path to extend Copilot's capabilities
    required: false
    default: ""
  allow-all-paths:
    description: Whether to allow Copilot CLI access to any file path
    required: false
    default: "true"
  model:
    description: Optional model identifier to pass to Copilot CLI
    required: false
    default: ""
  github-token:
    description: Personal access token with Copilot Requests scope. Defaults to github.token
    required: false
    default: ""
outputs:
  output-path:
    description: Absolute path to the Copilot CLI output file
runs:
  using: composite
  steps:
    - name: Setup Node.js for Copilot CLI
      uses: actions/setup-node@v4
      with:
        node-version: "22"
    - name: Install GitHub Copilot CLI
      shell: bash
      run: |
        set -euo pipefail
        npm install -g @github/copilot
    - name: Render prompt template
      id: render
      shell: bash
      env:
        PROMPT_TEMPLATE: ${{ inputs.prompt-path }}
        PROMPT_VARS: ${{ inputs.substitutions != '' && inputs.substitutions || '{}' }}
      run: |
        set -euo pipefail
        if [ ! -f "$PROMPT_TEMPLATE" ]; then
          echo "Prompt template not found: $PROMPT_TEMPLATE" >&2
          exit 1
        fi
        rendered="$(mktemp)"
        # Parse JSON substitutions and export as environment variables for envsubst
        node <<'NODE'
        const vars = JSON.parse(process.env.PROMPT_VARS || '{}');
        for (const [key, value] of Object.entries(vars)) {
          console.log(`export ${key}=${JSON.stringify(String(value))}`);
        }
        NODE > /tmp/exports.sh
        source /tmp/exports.sh
        # Use envsubst to substitute environment variables
        envsubst < "$PROMPT_TEMPLATE" > "$rendered"
        rm /tmp/exports.sh
        echo "prompt-file=$rendered" >> "$GITHUB_OUTPUT"
        echo "Rendered prompt:" >&2
        sed 's/^/  /' "$rendered" >&2
    - name: Execute Copilot CLI
      id: copilot
      shell: bash
      env:
        WORKDIR: ${{ inputs.working-directory != '' && inputs.working-directory || github.workspace }}
        PROMPT_FILE: ${{ steps.render.outputs.prompt-file }}
        RAW_OUTPUT_PATH: ${{ inputs.output-path }}
        EXTRA_ARGS: ${{ inputs.extra-args }}
        ADDITIONAL_MCP_CONFIG: ${{ inputs.additional-mcp-config }}
        ALLOW_ALL_PATHS: ${{ inputs.allow-all-paths }}
        REQUESTED_MODEL: ${{ inputs.model }}
        COPILOT_ALLOW_ALL: "1"
        COPILOT_TELEMETRY_OPTOUT: "1"
        COPILOT_MCP_SERVER: github
        GH_TOKEN: ${{ inputs.github-token != '' && inputs.github-token || github.token }}
        GITHUB_TOKEN: ${{ inputs.github-token != '' && inputs.github-token || github.token }}
      run: |
        set -euo pipefail
        if [ -z "$PROMPT_FILE" ] || [ ! -f "$PROMPT_FILE" ]; then
          echo "Rendered prompt file missing" >&2
          exit 1
        }
        mkdir -p "$WORKDIR"
        cd "$WORKDIR"
        output_path="$RAW_OUTPUT_PATH"
        if [ -z "$output_path" ]; then
          output_path="copilot-output.txt"
        fi
        if [ "${output_path:0:1}" != "/" ]; then
          output_path="$WORKDIR/$output_path"
        fi
        mkdir -p "$(dirname "$output_path")"
        prompt="$(cat "$PROMPT_FILE")"
        cmd=(copilot -p "$prompt" --allow-all-tools --no-color --add-dir "$WORKDIR")
        if [ "${ALLOW_ALL_PATHS,,}" = "true" ]; then
          cmd+=(--allow-all-paths)
        fi
        if [ -n "$REQUESTED_MODEL" ]; then
          cmd+=(--model "$REQUESTED_MODEL")
        fi
        if [ -n "$EXTRA_ARGS" ]; then
          # shellcheck disable=SC2206
          extra_parts=($EXTRA_ARGS)
          cmd+=("${extra_parts[@]}")
        fi
        if [ -n "$ADDITIONAL_MCP_CONFIG" ]; then
          config_arg="$ADDITIONAL_MCP_CONFIG"
          if [[ "$config_arg" == @* ]]; then
            cmd+=(--additional-mcp-config "$config_arg")
          else
            tmp_config="$(mktemp)"
            printf '%s' "$config_arg" > "$tmp_config"
            cmd+=(--additional-mcp-config "@$tmp_config")
          fi
        fi
        echo "Running: ${cmd[*]}" >&2
        "${cmd[@]}" | tee "$output_path"
        status=${PIPESTATUS[0]}
        if [ "$status" -ne 0 ]; then
          echo "Copilot CLI exited with status $status" >&2
          exit "$status"
        fi
        echo "output-path=$output_path" >> "$GITHUB_OUTPUT"

name: copilot-exec
description: Run GitHub Copilot CLI with a rendered prompt template (simplified env-based + caching)
author: "ralph@nyphon.de"

inputs:
  prompt-path:
    description: Path to the prompt template file
    required: true
  working-directory:
    description: Directory to run the Copilot command in
    required: false
    default: ""
  output-path:
    description: File path (relative to working-directory) to store Copilot output
    required: false
    default: copilot-output.txt
  extra-args:
    description: Additional arguments to append to the Copilot CLI invocation
    required: false
    default: ""
  additional-mcp-config:
    description: Optional MCP configuration JSON or @path to extend Copilot's capabilities
    required: false
    default: ""
  allow-all-paths:
    description: Whether to allow Copilot CLI access to any file path
    required: false
    default: "true"
  model:
    description: Optional model identifier to pass to Copilot CLI
    required: false
    default: ""
  copilot-token:
    description: Personal access token with Copilot Requests scope. Defaults to github.token
    required: false
    default: ""

outputs:
  output-path:
    description: Absolute path to the Copilot CLI output file
    value: ${{ steps.copilot.outputs.output-path }}

runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20" # stick to prebuilt sharp targets

    - name: Cache npm global + npm cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm/_global
          ~/.npm/_cacache
        key: copilot-cli-${{ runner.os }}-node20-v1-@github/copilot@1.0.0-${{ hashFiles('.github/actions/copilot-exec/action.yml') }}

    # 🚫 Remove apt-get entirely unless you *know* you need it
    # sharp will fetch its own prebuilt libvips bundle.

    - name: Install Copilot CLI (npm global)
      shell: bash
      run: |
        set -euo pipefail
        export NPM_CONFIG_PREFIX="$HOME/.npm/_global"
        export PATH="$HOME/.npm/_global/bin:$PATH"
        if command -v copilot >/dev/null 2>&1; then
          echo "✅ Copilot CLI cached"
        else
          npm install -g @github/copilot
        fi
        echo "$HOME/.npm/_global/bin" >> "$GITHUB_PATH"

    - name: Render prompt
      id: render
      shell: bash
      env:
        PROMPT_TEMPLATE: ${{ inputs.prompt-path }}
      run: |
        set -euo pipefail
        rendered="$(mktemp)"
        envsubst < "$PROMPT_TEMPLATE" > "$rendered"
        echo "prompt-file=$rendered" >> "$GITHUB_OUTPUT"
        echo "prompt-sha=$(sha256sum "$rendered" | awk '{print $1}')" >> "$GITHUB_OUTPUT"

    - name: Restore result cache
      id: cache-result
      uses: actions/cache@v4
      with:
        path: .copilot-cache/output.txt
        key: copilot-result-${{ steps.render.outputs.prompt-sha }}-${{ inputs.model }}-${{ runner.os }}

    - name: Short-circuit if cached
      if: steps.cache-result.outputs.cache-hit == 'true'
      id: cached
      shell: bash
      env:
        WORKDIR: ${{ inputs.working-directory != '' && inputs.working-directory || github.workspace }}
        RAW_OUTPUT_PATH: ${{ inputs.output-path }}
      run: |
        set -euo pipefail
        out="${RAW_OUTPUT_PATH:-copilot-output.txt}"
        [[ "${out:0:1}" != "/" ]] && out="$WORKDIR/$out"
        mkdir -p "$(dirname "$out")"
        cp .copilot-cache/output.txt "$out"
        echo "output-path=$out" >> "$GITHUB_OUTPUT"
        echo "✅ Reused cached Copilot output"

    - name: Install jq
      if: steps.cache-result.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -qq && sudo apt-get install -y -qq jq
        fi

    - name: Setup MCP configuration
      if: steps.cache-result.outputs.cache-hit != 'true'
      id: mcp-config
      shell: bash
      env:
        ADDITIONAL_MCP_CONFIG: ${{ inputs.additional-mcp-config }}
      run: |
        set -euo pipefail
        mcp_config_file="$HOME/.copilot-mcp-config.json"

        # Start with base GitHub MCP server configuration
        cat > "$mcp_config_file" << 'EOF'
        {
          "mcpServers": {
            "github": {
              "command": "npx",
              "args": ["-y", "@modelcontextprotocol/server-github"]
            }
          }
        }
        EOF

        # If additional MCP config is provided, merge it
        if [ -n "$ADDITIONAL_MCP_CONFIG" ]; then
          if [[ "$ADDITIONAL_MCP_CONFIG" == @* ]]; then
            # It's a file path reference (starts with @)
            config_file="${ADDITIONAL_MCP_CONFIG:1}"
            if [ -f "$config_file" ]; then
              echo "📋 Merging MCP config from $config_file"
              # Use jq to merge the configurations
              jq -s '.[0].mcpServers * .[1].mcpServers | {mcpServers: .}' \
                "$mcp_config_file" "$config_file" > "$mcp_config_file.tmp"
              mv "$mcp_config_file.tmp" "$mcp_config_file"
            else
              echo "⚠️  MCP config file not found: $config_file"
            fi
          else
            # It's inline JSON
            echo "📋 Merging inline MCP config"
            echo "$ADDITIONAL_MCP_CONFIG" > "$mcp_config_file.tmp"
            jq -s '.[0].mcpServers * .[1].mcpServers | {mcpServers: .}' \
              "$mcp_config_file" "$mcp_config_file.tmp" > "$mcp_config_file.merged"
            mv "$mcp_config_file.merged" "$mcp_config_file"
            rm "$mcp_config_file.tmp"
          fi
        fi

        echo "✅ MCP configuration prepared at $mcp_config_file"
        cat "$mcp_config_file" >&2
        echo "mcp-config-file=$mcp_config_file" >> "$GITHUB_OUTPUT"

    - name: Execute Copilot CLI
      if: steps.cache-result.outputs.cache-hit != 'true'
      id: copilot
      shell: bash
      env:
        WORKDIR: ${{ inputs.working-directory != '' && inputs.working-directory || github.workspace }}
        PROMPT_FILE: ${{ steps.render.outputs.prompt-file }}
        RAW_OUTPUT_PATH: ${{ inputs.output-path }}
        EXTRA_ARGS: ${{ inputs.extra-args }}
        REQUESTED_MODEL: ${{ inputs.model }}
        GH_TOKEN: ${{ inputs.copilot-token != '' && inputs.copilot-token || github.token }}
        GITHUB_TOKEN: ${{ inputs.copilot-token != '' && inputs.copilot-token || github.token }}
        COPILOT_ALLOW_ALL: "1"
        COPILOT_TELEMETRY_OPTOUT: "1"
        COPILOT_MCP_CONFIG: ${{ steps.mcp-config.outputs.mcp-config-file }}
      run: |
        set -euo pipefail
        export PATH="$HOME/.npm/_global/bin:$PATH"
        out="${RAW_OUTPUT_PATH:-copilot-output.txt}"
        [[ "${out:0:1}" != "/" ]] && out="$WORKDIR/$out"
        mkdir -p "$WORKDIR" "$(dirname "$out")"
        prompt="$(cat "$PROMPT_FILE")"

        cmd=(copilot -p "$prompt" --allow-all-tools --no-color --add-dir "$WORKDIR")
        [ -n "$REQUESTED_MODEL" ] && cmd+=(--model "$REQUESTED_MODEL")
        if [ -n "$EXTRA_ARGS" ]; then read -r -a extra <<< "$EXTRA_ARGS"; cmd+=("${extra[@]}"); fi

        echo "🚀 ${cmd[*]}" >&2
        mkdir -p .copilot-cache
        "${cmd[@]}" | tee .copilot-cache/output.txt > "$out"
        status=${PIPESTATUS[0]}
        [ "$status" -eq 0 ] || { echo "❌ status $status" >&2; exit "$status"; }

        echo "output-path=$out" >> "$GITHUB_OUTPUT"
        echo "✅ Copilot CLI finished"

name: Post Merge Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 2
        uses: ./.github/actions/setup-python2

      - name: Setup Node.js 16
        uses: ./.github/actions/setup-node16

      - name: Export Python path for node-gyp
        shell: bash
        run: |
          echo "GYP_DEFINES=standalone_static_library=0" >> $GITHUB_ENV
          echo "PYTHON=$(command -v python2 || command -v python)" >> $GITHUB_ENV
          python --version

      - name: Install dependencies (with Python 2)
        run: npm install

      - name: Lint with fixes
        run: npm run lint:fix

      - name: Format with write
        run: npm run format:write

      - name: Bump version
        id: bump
        run: |
          VERSION=$(npm run version:bump | tail -n 1)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Refresh version index
        run: npm run versions:update

      - name: Commit changes
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: prepare release ${{ steps.bump.outputs.version }}"

      - name: Create tag
        if: steps.bump.outputs.version != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.bump.outputs.version }}';
            const sha = '${{ steps.commit.outputs.commit_hash || github.sha }}';
            const ref = `refs/tags/v${version}`;
            try {
              await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref });
              core.info(`Tag ${ref} already exists`);
            } catch (error) {
              if (error.status !== 404) throw error;
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha,
              });
              core.info(`Created tag ${ref} at ${sha}`);
            }

      - name: Create release branch and PR for tag
        if: steps.bump.outputs.version != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const version = '${{ steps.bump.outputs.version }}';
            const tag = `v${version}`;
            const branch = `release/${tag}`;

            // Determine the commit SHA to use (same as the commit we tagged)
            const sha = '${{ steps.commit.outputs.commit_hash || github.sha }}';

            // 1) Ensure the branch exists at the tag's commit
            async function ensureBranch() {
              try {
                await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
                core.info(`Branch ${branch} already exists`);
              } catch (err) {
                if (err.status !== 404) throw err;
                await github.rest.git.createRef({
                  owner, repo,
                  ref: `refs/heads/${branch}`,
                  sha
                });
                core.info(`Created branch ${branch} at ${sha}`);
              }
            }

            // 2) Generate release notes for the tag to use as PR body (best-effort)
            async function generateNotes() {
              try {
                const { data } = await github.rest.repos.generateReleaseNotes({
                  owner, repo,
                  tag_name: tag,
                  target_commitish: sha
                });
                return data.body || `Release ${tag}`;
              } catch (e) {
                core.warning(`Could not generate release notes: ${e.message}`);
                return `Release ${tag}`;
              }
            }

            // 3) Create (or reuse) the PR release/<tag> -> main
            async function ensurePullRequest(body) {
              const baseBranch = 'main';
              // Reuse if already open
              const { data: prs } = await github.rest.pulls.list({
                owner, repo, state: 'open', head: `${owner}:${branch}`, base: baseBranch
              });
              if (prs.length > 0) {
                core.info(`PR already exists: #${prs[0].number}`);
                core.setOutput('pr_number', prs[0].number);
                return;
              }
              const { data: pr } = await github.rest.pulls.create({
                owner, repo,
                title: `Release ${tag}`,
                head: branch,
                base: baseBranch,
                body
              });
              core.info(`Created PR #${pr.number} for ${branch} -> ${baseBranch}`);
              core.setOutput('pr_number', pr.number);
            }

            await ensureBranch();
            const body = await generateNotes();
            await ensurePullRequest(body);

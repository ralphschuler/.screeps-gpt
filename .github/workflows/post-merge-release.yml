---
name: Post Merge Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    # Skip if commit is a release (prevents recursive execution)
    if: >-
      !contains(github.event.head_commit.message, 'chore(release):')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python 2
        uses: ./.github/actions/setup-python2

      - name: Setup Node.js 16
        uses: ./.github/actions/setup-node16

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Export Python path for node-gyp
        shell: bash
        run: |
          echo "GYP_DEFINES=standalone_static_library=0" \
            >> $GITHUB_ENV
          echo "PYTHON=$(command -v python2 || command -v python)" \
            >> $GITHUB_ENV
          python --version

      - name: Install dependencies (with Python 2)
        run: npm install

      - name: Lint with fixes
        run: npm run lint:fix

      - name: Format with write
        run: npm run format:write

      - name: Bump version (semantic)
        id: bump
        shell: bash
        run: |
          # Use semantic versioning based on conventional commits
          VERSION=$(npm run version:bump-semantic 2>&1 | \
            grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          BUMP_TYPE=$(npm run version:bump-semantic 2>&1 | \
            grep 'Bump type:' | awk '{print $3}' || echo "patch")
          if [ -z "$VERSION" ]; then
            echo "Version bump did not return a version"; exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"

      - name: Refresh version index
        run: npm run versions:update

      # Commit version bump and changelog directly to main
      - name: Commit version bump to main
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: >-
            chore(release): bump version to ${{
            steps.bump.outputs.version }} [skip ci]
          branch: main
          commit_user_name: github-actions[bot]
          commit_user_email: >-
            41898282+github-actions[bot]@users.noreply.github.com
          skip_fetch: false

      # Create and push tag to trigger deploy workflow
      - name: Create and push tag
        if: >-
          steps.bump.outputs.version != ''
          && steps.commit.outputs.commit_hash != ''
        shell: bash
        run: |
          VERSION="${{ steps.bump.outputs.version }}"
          TAG="v${VERSION}"
          SHA="${{ steps.commit.outputs.commit_hash }}"

          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            exit 0
          fi

          # Create and push the tag
          git tag "$TAG" "$SHA"
          git push origin "$TAG" || {
            # Tag might have been created by another workflow run
            echo "Tag $TAG could not be pushed (may exist remotely)"
            exit 0
          }

      # Create GitHub Release using native API
      - name: Create GitHub Release
        if: >-
          steps.bump.outputs.version != ''
          && steps.commit.outputs.commit_hash != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const version = '${{ steps.bump.outputs.version }}';
            const tag = `v${version}`;
            const sha = '${{ steps.commit.outputs.commit_hash }}';
            const bumpType = '${{ steps.bump.outputs.bump_type }}';

            // Generate release notes using GitHub's API
            let releaseNotes = '';
            try {
              const { data } = await github.rest.repos.generateReleaseNotes({
                owner,
                repo,
                tag_name: tag,
                target_commitish: sha
              });
              releaseNotes = data.body || '';
            } catch (e) {
              core.warning(`Could not generate release notes: ${e.message}`);
              releaseNotes = `Automated release ${tag}`;
            }

            // Check if release already exists
            try {
              const { data: existingRelease } = await
                github.rest.repos.getReleaseByTag({
                  owner,
                  repo,
                  tag
                });
              core.info(`Release ${tag} already exists: ${
                existingRelease.html_url}`);
              return;
            } catch (err) {
              if (err.status !== 404) throw err;
              // Release doesn't exist, create it
            }

            // Create the release
            const { data: release } = await
              github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                target_commitish: sha,
                name: `Release ${tag}`,
                body: `## ${tag}\n\nVersion bump type: **${
                  bumpType}**\n\n${releaseNotes}`,
                draft: false,
                prerelease: version.startsWith('0.')
              });

            core.info(`Created release: ${release.html_url}`);

name: Deploy Screeps AI

on:
  push:
    tags:
      - "v*"
  workflow_run:
    workflows: ["Post Merge Release"]
    types:
      - completed

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if:
    # 1. Triggered by tag push, OR
    # 2. Triggered by workflow_run AND it was successful AND from the base repository (not a fork)
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_run' && 
       github.event.workflow_run.conclusion == 'success' && 
       github.event.workflow_run.head_repository.full_name == github.repository)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For workflow_run, checkout the specific commit SHA instead of branch name to prevent code injection
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.ref }}
          fetch-depth: 0

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Tag push event - extract version from tag
            VERSION="${{ github.ref_name }}"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "Deploying tagged version: $VERSION"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Workflow run event - find the latest version tag
            SHA="${{ github.event.workflow_run.head_sha }}"
            echo "Looking for version tag for commit $SHA"
            
            # First try to find a tag pointing to this exact commit
            VERSION=$(git tag --points-at "$SHA" | grep -E '^v[0-9]' | head -n 1 || true)
            
            # If no tag found on this commit, get the latest version tag
            # This handles the case where the Post Merge Release workflow 
            # created a tag on a release branch commit
            if [[ -z "$VERSION" ]]; then
              echo "No tag found at commit $SHA, looking for latest version tag..."
              VERSION=$(git tag -l 'v*' | sort -V | tail -n 1)
              if [[ -z "$VERSION" ]]; then
                echo "Error: No version tags found in repository"
                exit 1
              fi
              echo "Using latest version tag: $VERSION"
            else
              echo "Found version tag at commit: $VERSION"
            fi
            
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "Deploying version $VERSION from commit $SHA"
          else
            echo "Unknown event type: ${{ github.event_name }}"
            exit 1
          fi

      - name: Setup Python 2
        uses: ./.github/actions/setup-python2
      - name: Setup Node.js 16
        uses: ./.github/actions/setup-node16
      - name: Export Python path for node-gyp
        shell: bash
        run: |
          echo "GYP_DEFINES=standalone_static_library=0" >> $GITHUB_ENV
          echo "PYTHON=$(command -v python2 || command -v python)" >> $GITHUB_ENV
          python --version
      - name: Install dependencies (with Python 2)
        run: npm install
      - name: Build and deploy
        env:
          SCREEPS_TOKEN: ${{ secrets.SCREEPS_TOKEN }}
          SCREEPS_HOST: ${{ secrets.SCREEPS_HOST }}
          SCREEPS_PORT: ${{ secrets.SCREEPS_PORT }}
          SCREEPS_PROTOCOL: ${{ secrets.SCREEPS_PROTOCOL }}
          SCREEPS_BRANCH: ${{ secrets.SCREEPS_BRANCH }}
          SCREEPS_PATH: ${{ secrets.SCREEPS_PATH }}
        run: npm run deploy

import { mkdir, readFile, writeFile } from "node:fs/promises";
import { dirname, resolve } from "node:path";
import { parseChangelog, formatVersionLink } from "./lib/changelog";

async function updateVersionIndex(): Promise<void> {
  const changelogPath = resolve("CHANGELOG.md");
  const changelogMarkdown = await readFile(changelogPath, "utf8");
  const changelog = parseChangelog(changelogMarkdown);

  const releases = changelog.versions.map(version => ({
    version: version.version,
    date: version.date ?? null,
    notes: version.notes,
    anchor: version.anchor,
    slug: version.slug
  }));

  const jsonPath = resolve("docs/changelog/versions.json");
  await mkdir(dirname(jsonPath), { recursive: true });
  await writeFile(jsonPath, `${JSON.stringify(releases, null, 2)}\n`, "utf8");

  const markdownLines: string[] = [];
  markdownLines.push("# Release History");
  markdownLines.push("");
  markdownLines.push(
    "_This file is generated by `bun run versions:update`. Do not edit manually—update CHANGELOG.md instead._"
  );
  markdownLines.push("");
  if (releases.length === 0) {
    markdownLines.push("No tagged releases have been recorded yet.");
  } else {
    for (const release of releases) {
      const link = formatVersionLink({
        heading: release.version,
        anchor: release.anchor,
        content: "",
        notes: release.notes,
        version: release.version,
        date: release.date ?? undefined,
        slug: release.slug
      });
      const headerLine = release.date
        ? `- **${release.version}** – ${release.date} ([changelog](${link}))`
        : `- **${release.version}** ([changelog](${link}))`;
      markdownLines.push(headerLine);
      if (release.notes.length > 0) {
        for (const note of release.notes) {
          markdownLines.push(`  - ${note}`);
        }
      }
      markdownLines.push("");
    }
    // remove trailing blank line for neatness
    while (markdownLines.length > 0 && markdownLines[markdownLines.length - 1] === "") {
      markdownLines.pop();
    }
  }

  const markdownPath = resolve("docs/changelog/versions.md");
  await mkdir(dirname(markdownPath), { recursive: true });
  await writeFile(markdownPath, markdownLines.join("\n") + "\n", "utf8");
}

updateVersionIndex().catch(error => {
  console.error("Failed to update version index", error);
  process.exitCode = 1;
});
